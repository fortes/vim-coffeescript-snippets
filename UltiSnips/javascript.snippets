# vim: fdm=marker
# General JS
snippet fn "function"
(${1:args}) => {
  $0
}${2:;}
endsnippet

snippet if "if statement"
if (${1:true}) {
  $0
}
endsnippet

snippet ife "if/else statement"
if (${1:true}) {
  ${2}
} else {
  $0
}
endsnippet

snippet .fe "Array forEach" i
.forEach((${1:item}) => {
  $0
}){$2:;}
endsnippet

snippet .m "Array map" i
.map((${1:item}) => {
}){$2:;}
endsnippet

snippet mr "Module require"
const ${1:module} = require('${2:$1}')${3:;}
endsnippet

snippet epd "Prevent default & stop propagation"
${1:e}.preventDefault();
${1:e}.stopPropagation();$0
endsnippet

# Mocha-isms {{{
snippet des "Test describe"
describe('${1}', () => {
	$0
});
endsnippet

snippet it "Test it"
it('${1}', () => {
	$0
});
endsnippet

snippet ae "Test After Each"
afterEach(() => {
	$0
});
endsnippet

snippet be "Test Before Each"
beforeEach(() => {
	$0
});
endsnippet

snippet tpi "prettyPrint instance"
testHelper.prettyPrint(${1:instance}.getDOMNode());$0
endsnippet
# }}}

# React-isms {{{
snippet pbool "Boolean propType"
	${1}: React.PropTypes.bool${2:.isRequired}${3:,}
endsnippet

snippet pobj "Object propType"
	${1}: React.PropTypes.object${2:.isRequired}${3:,}
endsnippet

snippet pnumber "Number propType"
	${1}: React.PropTypes.number${2:.isRequired}${3:,}
endsnippet

snippet pfun "Function propType"
	${1}: React.PropTypes.func${2:.isRequired}${3:,}
endsnippet

snippet pstr "String propType"
	${1}: React.PropTypes.string${2:.isRequired}${3:,}
endsnippet

snippet gdm "getDOMNode"
${1:this}.getDOMNode()$0
endsnippet

snippet gis "getInitialState"
getInitialState() {
	return {
		$1
	};
},
endsnippet

snippet gdp "getDefaultProps"
getDefaultProps() {
	return {
		$1
	};
},
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	$1
},
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	$1
},
endsnippet

snippet cwrp "componentWillReceiveProps"
componentWillReceiveProps(nextProps) {
	$1
},
endsnippet

snippet cwup "componentWillUpdate"
componentWillUpdate(nextProps, nextState) {
	$1
},
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$1
},
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {
	$1
},
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
	$1
},
endsnippet

snippet rcomp "React Component"
var React = require('react/addons');

module.exports = React.createClass({
	mixins: [React.addons.PureRenderMixin],

	displayName: '${1:MyComponent}',

	propTypes: {
	},

	render() {
		${2:return React.DOM.div(null, 'My Component');}
	}
});
endsnippet
# }}}
