# vim: fdm=marker
# General JS
snippet fn "function"
(${1:args}) => {
	$0
}${2:;}
endsnippet

snippet if "if statement"
if (${1:true}) {
	$0
}
endsnippet

snippet ife "if/else statement"
if (${1:true}) {
	${2}
} else {
	$0
}
endsnippet

snippet .fe "Array forEach" i
.forEach((${1:item}) => {
	$0
}){$2:;}
endsnippet

snippet .m "Array map" i
.map((${1:item}) => {
}){$2:;}
endsnippet

snippet mr "Module require"
const ${1:module} = require('${2:$1}')${3:;}
endsnippet

snippet epd "Prevent default & stop propagation"
${1:e}.preventDefault();
${1:e}.stopPropagation();$0
endsnippet

# Mocha-isms {{{
snippet des "Test describe"
describe('${1}', () => {
	$0
});
endsnippet

snippet it "Test it"
it('${1}', () => {
	$0
});
endsnippet

snippet ae "Test After Each"
afterEach(() => {
	$0
});
endsnippet

snippet be "Test Before Each"
beforeEach(() => {
	$0
});
endsnippet

snippet tpi "prettyPrint instance"
testHelper.prettyPrint(ReactDOM.findDOMNode(${1:instance}));$0
endsnippet
# }}}

# React-isms {{{
snippet pbool "Boolean propType"
	${1}: React.PropTypes.bool${2:.isRequired}${3:,}
endsnippet

snippet pobj "Object propType"
	${1}: React.PropTypes.object${2:.isRequired}${3:,}
endsnippet

snippet pnumber "Number propType"
	${1}: React.PropTypes.number${2:.isRequired}${3:,}
endsnippet

snippet pfun "Function propType"
	${1}: React.PropTypes.func${2:.isRequired}${3:,}
endsnippet

snippet pstr "String propType"
	${1}: React.PropTypes.string${2:.isRequired}${3:,}
endsnippet

snippet fdm "findDOMNode"
ReactDOM.findDOMNode(${1:this})$0
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	$1
}
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "componentWillReceiveProps"
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet cwup "componentWillUpdate"
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {
	$1
}
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet rex "React Example"
'use strict';

const {${1:Component}} = require('../${2:$1}');

const description = '';
const examples = [
	{
		name: 'Basic',
		render() {
			return Component.create();
		},
	},
];

module.exports = {
	component: $1,
	description: '',
	examples,
};
endsnippet

snippet rcomp "React Component"
'use strict';

const BaseComponent = require('kr-react-components/base_component');
const React = require('react');

class ${1:MyComponent} extends BaseComponent {
	render() {
		${2:return React.DOM.div(null, 'My Component');}
	}
}

BaseComponent.defaultProps = {
};

BaseComponent.propTypes = {
};

module.exports.${2:$1} = ${2:$1}
endsnippet

snippet rtest "React Component Test"
const testHelper = require('../test_helper');

const {${1:Component}} = require('../${2:$1}');
const ReactDOM = require('react-dom');

describe('${3:$1}', () => {
	let instance;
	let node;

	beforeEach(() => {
		instance = testHelper.renderComponent($1.create({
		}));
		assert(instance, 'Instantiated');

		node = ReactDOM.findDOMNode(instance);
		assert(node, 'Rendered');
	});

	it('works', () => {
		assert(false, 'TODO: Implement tests');
	});
});
endsnippet
# }}}
